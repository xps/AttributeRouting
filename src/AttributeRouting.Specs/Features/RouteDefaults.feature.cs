// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.17379
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AttributeRouting.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Route Defaults")]
    public partial class RouteDefaultsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RouteDefaults.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Route Defaults", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("I generate the routes defined in the subject controllers");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Route default specified with an attribute")]
        public virtual void RouteDefaultSpecifiedWithAnAttribute()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Route default specified with an attribute", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 7
 testRunner.When("I fetch the routes for the RouteDefaults controller\'s Index action");
#line 8
 testRunner.Then("the default for \"p1\" is \"variable\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Route default specified inline")]
        public virtual void RouteDefaultSpecifiedInline()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Route default specified inline", ((string[])(null)));
#line 10
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 11
 testRunner.When("I fetch the routes for the RouteDefaults controller\'s InlineDefaults action");
#line 12
 testRunner.Then("the route url is \"InlineDefaults/{hello}/{goodnight}\"");
#line 13
 testRunner.Then("the default for \"hello\" is \"sun\"");
#line 14
 testRunner.Then("the default for \"goodnight\" is \"moon\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Optional parameters specified with a url parameter token")]
        public virtual void OptionalParametersSpecifiedWithAUrlParameterToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Optional parameters specified with a url parameter token", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 17
 testRunner.When("I fetch the routes for the RouteDefaults controller\'s Optionals action");
#line 18
 testRunner.Then("the route url is \"Optionals/{p1}/{p2}/{p3}\"");
#line 19
  testRunner.And("the parameter \"p1\" is optional");
#line 20
  testRunner.And("the parameter \"p2\" is optional");
#line 21
  testRunner.And("the parameter \"p3\" is optional");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiple routes with different defaults")]
        public virtual void MultipleRoutesWithDifferentDefaults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple routes with different defaults", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 24
 testRunner.When("I fetch the routes for the RouteDefaults controller\'s MultipleRoutes action");
#line 25
 testRunner.Then("the route named \"MultipleDefaults1\" has a default for \"p1\" of \"first\"");
#line 26
  testRunner.And("the route named \"MultipleDefaults2\" has a default for \"p1\" of \"second\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mixing inline optional parameters and constraints")]
        public virtual void MixingInlineOptionalParametersAndConstraints()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mixing inline optional parameters and constraints", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 29
 testRunner.When("I fetch the routes for the RouteDefaults controller\'s OptionalsAndConstraints act" +
                    "ion");
#line 30
 testRunner.Then("the route url is \"OptionalsAndConstraints/{p1}/{p2}/{p3}\"");
#line 31
  testRunner.And("the parameter \"p1\" is of type \"int\"");
#line 32
  testRunner.And("the parameter \"p2\" is of type \"int\"");
#line 33
  testRunner.And("the parameter \"p3\" is of type \"int\"");
#line 34
  testRunner.And("the parameter \"p1\" is optional");
#line 35
  testRunner.And("the parameter \"p2\" is optional");
#line 36
  testRunner.And("the parameter \"p3\" is optional");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mixing inline optional parameters and constraints with parameters")]
        public virtual void MixingInlineOptionalParametersAndConstraintsWithParameters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mixing inline optional parameters and constraints with parameters", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 39
 testRunner.When("I fetch the routes for the RouteDefaults controller\'s OptionalsAndConstraintsWith" +
                    "Parameters action");
#line 40
 testRunner.Then("the route url is \"OptionalsAndConstraintsWithParameters/{p1}/{p2}/{p3}\"");
#line 41
  testRunner.And("the parameter \"p1\" is of type \"string\" and has a maximum length of 10");
#line 42
  testRunner.And("the parameter \"p2\" is of type \"string\" and has a maximum length of 10");
#line 43
  testRunner.And("the parameter \"p3\" is of type \"string\" and has a maximum length of 10");
#line 44
  testRunner.And("the parameter \"p1\" is optional");
#line 45
  testRunner.And("the parameter \"p2\" is optional");
#line 46
  testRunner.And("the parameter \"p3\" is optional");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
